/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6511.0, "minX": 0.0, "maxY": 49479.0, "series": [{"data": [[0.0, 6511.0], [0.1, 6956.0], [0.2, 7421.0], [0.3, 7421.0], [0.4, 8440.0], [0.5, 9132.0], [0.6, 9684.0], [0.7, 10192.0], [0.8, 10252.0], [0.9, 10461.0], [1.0, 10898.0], [1.1, 10898.0], [1.2, 10936.0], [1.3, 11040.0], [1.4, 11040.0], [1.5, 11054.0], [1.6, 11539.0], [1.7, 11995.0], [1.8, 12108.0], [1.9, 12162.0], [2.0, 12195.0], [2.1, 12202.0], [2.2, 12244.0], [2.3, 12632.0], [2.4, 12689.0], [2.5, 12745.0], [2.6, 12968.0], [2.7, 12997.0], [2.8, 13050.0], [2.9, 13244.0], [3.0, 13279.0], [3.1, 13434.0], [3.2, 13446.0], [3.3, 13504.0], [3.4, 13615.0], [3.5, 13728.0], [3.6, 13773.0], [3.7, 13910.0], [3.8, 13912.0], [3.9, 13928.0], [4.0, 14372.0], [4.1, 14394.0], [4.2, 14461.0], [4.3, 14509.0], [4.4, 14770.0], [4.5, 14811.0], [4.6, 14902.0], [4.7, 15195.0], [4.8, 15213.0], [4.9, 15255.0], [5.0, 15295.0], [5.1, 15383.0], [5.2, 15399.0], [5.3, 15438.0], [5.4, 15548.0], [5.5, 15634.0], [5.6, 15682.0], [5.7, 15748.0], [5.8, 15903.0], [5.9, 15923.0], [6.0, 16025.0], [6.1, 16095.0], [6.2, 16129.0], [6.3, 16354.0], [6.4, 16403.0], [6.5, 16413.0], [6.6, 16454.0], [6.7, 16656.0], [6.8, 16668.0], [6.9, 16718.0], [7.0, 16760.0], [7.1, 16789.0], [7.2, 16793.0], [7.3, 16794.0], [7.4, 16843.0], [7.5, 16876.0], [7.6, 16885.0], [7.7, 16910.0], [7.8, 17073.0], [7.9, 17084.0], [8.0, 17153.0], [8.1, 17181.0], [8.2, 17219.0], [8.3, 17224.0], [8.4, 17260.0], [8.5, 17284.0], [8.6, 17409.0], [8.7, 17474.0], [8.8, 17512.0], [8.9, 17526.0], [9.0, 17542.0], [9.1, 17545.0], [9.2, 17562.0], [9.3, 17583.0], [9.4, 17633.0], [9.5, 17648.0], [9.6, 17733.0], [9.7, 17772.0], [9.8, 17789.0], [9.9, 17814.0], [10.0, 17844.0], [10.1, 17857.0], [10.2, 17874.0], [10.3, 17940.0], [10.4, 18032.0], [10.5, 18059.0], [10.6, 18084.0], [10.7, 18115.0], [10.8, 18196.0], [10.9, 18233.0], [11.0, 18255.0], [11.1, 18270.0], [11.2, 18277.0], [11.3, 18310.0], [11.4, 18323.0], [11.5, 18363.0], [11.6, 18396.0], [11.7, 18419.0], [11.8, 18467.0], [11.9, 18510.0], [12.0, 18580.0], [12.1, 18621.0], [12.2, 18640.0], [12.3, 18654.0], [12.4, 18678.0], [12.5, 18751.0], [12.6, 18770.0], [12.7, 18776.0], [12.8, 18785.0], [12.9, 18805.0], [13.0, 18846.0], [13.1, 18865.0], [13.2, 18899.0], [13.3, 18938.0], [13.4, 18963.0], [13.5, 19010.0], [13.6, 19040.0], [13.7, 19042.0], [13.8, 19067.0], [13.9, 19067.0], [14.0, 19075.0], [14.1, 19083.0], [14.2, 19090.0], [14.3, 19163.0], [14.4, 19165.0], [14.5, 19216.0], [14.6, 19218.0], [14.7, 19231.0], [14.8, 19247.0], [14.9, 19263.0], [15.0, 19291.0], [15.1, 19311.0], [15.2, 19320.0], [15.3, 19328.0], [15.4, 19365.0], [15.5, 19378.0], [15.6, 19417.0], [15.7, 19475.0], [15.8, 19486.0], [15.9, 19490.0], [16.0, 19493.0], [16.1, 19501.0], [16.2, 19509.0], [16.3, 19584.0], [16.4, 19596.0], [16.5, 19600.0], [16.6, 19646.0], [16.7, 19720.0], [16.8, 19728.0], [16.9, 19785.0], [17.0, 19795.0], [17.1, 19796.0], [17.2, 19799.0], [17.3, 19818.0], [17.4, 19903.0], [17.5, 19944.0], [17.6, 19954.0], [17.7, 19984.0], [17.8, 19987.0], [17.9, 20067.0], [18.0, 20077.0], [18.1, 20121.0], [18.2, 20121.0], [18.3, 20147.0], [18.4, 20155.0], [18.5, 20186.0], [18.6, 20195.0], [18.7, 20234.0], [18.8, 20245.0], [18.9, 20246.0], [19.0, 20249.0], [19.1, 20257.0], [19.2, 20263.0], [19.3, 20318.0], [19.4, 20318.0], [19.5, 20327.0], [19.6, 20339.0], [19.7, 20340.0], [19.8, 20398.0], [19.9, 20408.0], [20.0, 20456.0], [20.1, 20465.0], [20.2, 20487.0], [20.3, 20500.0], [20.4, 20528.0], [20.5, 20569.0], [20.6, 20573.0], [20.7, 20636.0], [20.8, 20650.0], [20.9, 20663.0], [21.0, 20765.0], [21.1, 20772.0], [21.2, 20811.0], [21.3, 20811.0], [21.4, 20820.0], [21.5, 20822.0], [21.6, 20847.0], [21.7, 20884.0], [21.8, 20889.0], [21.9, 20901.0], [22.0, 20905.0], [22.1, 20932.0], [22.2, 20961.0], [22.3, 20972.0], [22.4, 20975.0], [22.5, 20983.0], [22.6, 20992.0], [22.7, 21038.0], [22.8, 21044.0], [22.9, 21122.0], [23.0, 21124.0], [23.1, 21148.0], [23.2, 21226.0], [23.3, 21262.0], [23.4, 21337.0], [23.5, 21339.0], [23.6, 21344.0], [23.7, 21359.0], [23.8, 21379.0], [23.9, 21411.0], [24.0, 21417.0], [24.1, 21426.0], [24.2, 21426.0], [24.3, 21426.0], [24.4, 21428.0], [24.5, 21479.0], [24.6, 21483.0], [24.7, 21503.0], [24.8, 21520.0], [24.9, 21524.0], [25.0, 21557.0], [25.1, 21607.0], [25.2, 21609.0], [25.3, 21620.0], [25.4, 21671.0], [25.5, 21672.0], [25.6, 21696.0], [25.7, 21718.0], [25.8, 21724.0], [25.9, 21753.0], [26.0, 21758.0], [26.1, 21768.0], [26.2, 21771.0], [26.3, 21885.0], [26.4, 21886.0], [26.5, 21886.0], [26.6, 21887.0], [26.7, 21960.0], [26.8, 21976.0], [26.9, 21988.0], [27.0, 21997.0], [27.1, 22025.0], [27.2, 22040.0], [27.3, 22048.0], [27.4, 22085.0], [27.5, 22090.0], [27.6, 22110.0], [27.7, 22135.0], [27.8, 22144.0], [27.9, 22162.0], [28.0, 22178.0], [28.1, 22192.0], [28.2, 22235.0], [28.3, 22243.0], [28.4, 22282.0], [28.5, 22314.0], [28.6, 22323.0], [28.7, 22375.0], [28.8, 22377.0], [28.9, 22396.0], [29.0, 22412.0], [29.1, 22422.0], [29.2, 22422.0], [29.3, 22450.0], [29.4, 22450.0], [29.5, 22454.0], [29.6, 22460.0], [29.7, 22488.0], [29.8, 22489.0], [29.9, 22489.0], [30.0, 22511.0], [30.1, 22541.0], [30.2, 22542.0], [30.3, 22544.0], [30.4, 22553.0], [30.5, 22555.0], [30.6, 22563.0], [30.7, 22565.0], [30.8, 22580.0], [30.9, 22587.0], [31.0, 22602.0], [31.1, 22615.0], [31.2, 22625.0], [31.3, 22640.0], [31.4, 22684.0], [31.5, 22720.0], [31.6, 22758.0], [31.7, 22780.0], [31.8, 22785.0], [31.9, 22798.0], [32.0, 22811.0], [32.1, 22814.0], [32.2, 22838.0], [32.3, 22882.0], [32.4, 22888.0], [32.5, 22896.0], [32.6, 22906.0], [32.7, 22908.0], [32.8, 22942.0], [32.9, 22956.0], [33.0, 22978.0], [33.1, 23001.0], [33.2, 23013.0], [33.3, 23057.0], [33.4, 23075.0], [33.5, 23087.0], [33.6, 23094.0], [33.7, 23128.0], [33.8, 23187.0], [33.9, 23187.0], [34.0, 23247.0], [34.1, 23249.0], [34.2, 23290.0], [34.3, 23292.0], [34.4, 23300.0], [34.5, 23316.0], [34.6, 23323.0], [34.7, 23341.0], [34.8, 23358.0], [34.9, 23395.0], [35.0, 23397.0], [35.1, 23416.0], [35.2, 23434.0], [35.3, 23472.0], [35.4, 23493.0], [35.5, 23507.0], [35.6, 23510.0], [35.7, 23526.0], [35.8, 23556.0], [35.9, 23567.0], [36.0, 23593.0], [36.1, 23611.0], [36.2, 23620.0], [36.3, 23636.0], [36.4, 23644.0], [36.5, 23647.0], [36.6, 23652.0], [36.7, 23674.0], [36.8, 23715.0], [36.9, 23732.0], [37.0, 23736.0], [37.1, 23737.0], [37.2, 23793.0], [37.3, 23831.0], [37.4, 23871.0], [37.5, 23872.0], [37.6, 23891.0], [37.7, 23912.0], [37.8, 23918.0], [37.9, 23918.0], [38.0, 23945.0], [38.1, 23947.0], [38.2, 23954.0], [38.3, 23957.0], [38.4, 24002.0], [38.5, 24005.0], [38.6, 24007.0], [38.7, 24020.0], [38.8, 24033.0], [38.9, 24043.0], [39.0, 24059.0], [39.1, 24104.0], [39.2, 24125.0], [39.3, 24125.0], [39.4, 24126.0], [39.5, 24131.0], [39.6, 24135.0], [39.7, 24194.0], [39.8, 24205.0], [39.9, 24205.0], [40.0, 24206.0], [40.1, 24257.0], [40.2, 24298.0], [40.3, 24340.0], [40.4, 24378.0], [40.5, 24403.0], [40.6, 24405.0], [40.7, 24440.0], [40.8, 24450.0], [40.9, 24476.0], [41.0, 24507.0], [41.1, 24533.0], [41.2, 24584.0], [41.3, 24641.0], [41.4, 24643.0], [41.5, 24650.0], [41.6, 24670.0], [41.7, 24672.0], [41.8, 24706.0], [41.9, 24732.0], [42.0, 24750.0], [42.1, 24776.0], [42.2, 24815.0], [42.3, 24829.0], [42.4, 24837.0], [42.5, 24843.0], [42.6, 24858.0], [42.7, 24867.0], [42.8, 24931.0], [42.9, 24966.0], [43.0, 24994.0], [43.1, 25017.0], [43.2, 25024.0], [43.3, 25030.0], [43.4, 25035.0], [43.5, 25048.0], [43.6, 25061.0], [43.7, 25090.0], [43.8, 25101.0], [43.9, 25108.0], [44.0, 25134.0], [44.1, 25171.0], [44.2, 25179.0], [44.3, 25184.0], [44.4, 25212.0], [44.5, 25226.0], [44.6, 25275.0], [44.7, 25293.0], [44.8, 25325.0], [44.9, 25329.0], [45.0, 25331.0], [45.1, 25351.0], [45.2, 25357.0], [45.3, 25396.0], [45.4, 25398.0], [45.5, 25401.0], [45.6, 25428.0], [45.7, 25446.0], [45.8, 25451.0], [45.9, 25454.0], [46.0, 25479.0], [46.1, 25521.0], [46.2, 25524.0], [46.3, 25525.0], [46.4, 25536.0], [46.5, 25587.0], [46.6, 25588.0], [46.7, 25599.0], [46.8, 25603.0], [46.9, 25638.0], [47.0, 25672.0], [47.1, 25709.0], [47.2, 25742.0], [47.3, 25762.0], [47.4, 25822.0], [47.5, 25827.0], [47.6, 25856.0], [47.7, 25866.0], [47.8, 25931.0], [47.9, 25944.0], [48.0, 25955.0], [48.1, 25956.0], [48.2, 26037.0], [48.3, 26049.0], [48.4, 26051.0], [48.5, 26068.0], [48.6, 26092.0], [48.7, 26113.0], [48.8, 26121.0], [48.9, 26132.0], [49.0, 26146.0], [49.1, 26163.0], [49.2, 26187.0], [49.3, 26197.0], [49.4, 26206.0], [49.5, 26238.0], [49.6, 26243.0], [49.7, 26284.0], [49.8, 26286.0], [49.9, 26296.0], [50.0, 26296.0], [50.1, 26297.0], [50.2, 26303.0], [50.3, 26329.0], [50.4, 26373.0], [50.5, 26386.0], [50.6, 26404.0], [50.7, 26406.0], [50.8, 26416.0], [50.9, 26430.0], [51.0, 26452.0], [51.1, 26473.0], [51.2, 26487.0], [51.3, 26519.0], [51.4, 26547.0], [51.5, 26558.0], [51.6, 26562.0], [51.7, 26570.0], [51.8, 26592.0], [51.9, 26607.0], [52.0, 26612.0], [52.1, 26616.0], [52.2, 26624.0], [52.3, 26641.0], [52.4, 26650.0], [52.5, 26665.0], [52.6, 26686.0], [52.7, 26686.0], [52.8, 26706.0], [52.9, 26709.0], [53.0, 26710.0], [53.1, 26726.0], [53.2, 26766.0], [53.3, 26777.0], [53.4, 26792.0], [53.5, 26820.0], [53.6, 26823.0], [53.7, 26842.0], [53.8, 26842.0], [53.9, 26858.0], [54.0, 26867.0], [54.1, 26871.0], [54.2, 26874.0], [54.3, 26897.0], [54.4, 26914.0], [54.5, 26920.0], [54.6, 26942.0], [54.7, 26952.0], [54.8, 26960.0], [54.9, 26970.0], [55.0, 26971.0], [55.1, 26978.0], [55.2, 26990.0], [55.3, 27001.0], [55.4, 27003.0], [55.5, 27041.0], [55.6, 27042.0], [55.7, 27054.0], [55.8, 27087.0], [55.9, 27109.0], [56.0, 27117.0], [56.1, 27157.0], [56.2, 27170.0], [56.3, 27176.0], [56.4, 27202.0], [56.5, 27204.0], [56.6, 27215.0], [56.7, 27224.0], [56.8, 27228.0], [56.9, 27241.0], [57.0, 27256.0], [57.1, 27261.0], [57.2, 27264.0], [57.3, 27266.0], [57.4, 27266.0], [57.5, 27270.0], [57.6, 27287.0], [57.7, 27305.0], [57.8, 27317.0], [57.9, 27319.0], [58.0, 27339.0], [58.1, 27344.0], [58.2, 27344.0], [58.3, 27347.0], [58.4, 27369.0], [58.5, 27375.0], [58.6, 27390.0], [58.7, 27394.0], [58.8, 27399.0], [58.9, 27412.0], [59.0, 27416.0], [59.1, 27424.0], [59.2, 27424.0], [59.3, 27440.0], [59.4, 27445.0], [59.5, 27448.0], [59.6, 27459.0], [59.7, 27465.0], [59.8, 27470.0], [59.9, 27482.0], [60.0, 27482.0], [60.1, 27486.0], [60.2, 27513.0], [60.3, 27520.0], [60.4, 27531.0], [60.5, 27536.0], [60.6, 27538.0], [60.7, 27543.0], [60.8, 27563.0], [60.9, 27565.0], [61.0, 27570.0], [61.1, 27601.0], [61.2, 27621.0], [61.3, 27621.0], [61.4, 27624.0], [61.5, 27639.0], [61.6, 27644.0], [61.7, 27679.0], [61.8, 27694.0], [61.9, 27718.0], [62.0, 27735.0], [62.1, 27760.0], [62.2, 27764.0], [62.3, 27786.0], [62.4, 27827.0], [62.5, 27829.0], [62.6, 27886.0], [62.7, 27912.0], [62.8, 27916.0], [62.9, 27958.0], [63.0, 27961.0], [63.1, 27964.0], [63.2, 27981.0], [63.3, 27999.0], [63.4, 28001.0], [63.5, 28005.0], [63.6, 28018.0], [63.7, 28024.0], [63.8, 28039.0], [63.9, 28047.0], [64.0, 28053.0], [64.1, 28058.0], [64.2, 28081.0], [64.3, 28105.0], [64.4, 28110.0], [64.5, 28141.0], [64.6, 28155.0], [64.7, 28159.0], [64.8, 28167.0], [64.9, 28171.0], [65.0, 28172.0], [65.1, 28205.0], [65.2, 28210.0], [65.3, 28227.0], [65.4, 28237.0], [65.5, 28244.0], [65.6, 28256.0], [65.7, 28266.0], [65.8, 28267.0], [65.9, 28328.0], [66.0, 28366.0], [66.1, 28385.0], [66.2, 28403.0], [66.3, 28416.0], [66.4, 28502.0], [66.5, 28515.0], [66.6, 28529.0], [66.7, 28541.0], [66.8, 28551.0], [66.9, 28576.0], [67.0, 28577.0], [67.1, 28625.0], [67.2, 28637.0], [67.3, 28643.0], [67.4, 28644.0], [67.5, 28650.0], [67.6, 28668.0], [67.7, 28680.0], [67.8, 28684.0], [67.9, 28687.0], [68.0, 28693.0], [68.1, 28694.0], [68.2, 28697.0], [68.3, 28716.0], [68.4, 28745.0], [68.5, 28748.0], [68.6, 28751.0], [68.7, 28769.0], [68.8, 28780.0], [68.9, 28800.0], [69.0, 28820.0], [69.1, 28831.0], [69.2, 28842.0], [69.3, 28882.0], [69.4, 28888.0], [69.5, 28910.0], [69.6, 28924.0], [69.7, 28937.0], [69.8, 28944.0], [69.9, 28951.0], [70.0, 28973.0], [70.1, 29051.0], [70.2, 29064.0], [70.3, 29066.0], [70.4, 29074.0], [70.5, 29076.0], [70.6, 29089.0], [70.7, 29170.0], [70.8, 29175.0], [70.9, 29185.0], [71.0, 29218.0], [71.1, 29232.0], [71.2, 29239.0], [71.3, 29241.0], [71.4, 29258.0], [71.5, 29295.0], [71.6, 29346.0], [71.7, 29380.0], [71.8, 29383.0], [71.9, 29400.0], [72.0, 29431.0], [72.1, 29440.0], [72.2, 29445.0], [72.3, 29445.0], [72.4, 29488.0], [72.5, 29494.0], [72.6, 29513.0], [72.7, 29539.0], [72.8, 29576.0], [72.9, 29583.0], [73.0, 29586.0], [73.1, 29589.0], [73.2, 29611.0], [73.3, 29641.0], [73.4, 29659.0], [73.5, 29673.0], [73.6, 29747.0], [73.7, 29783.0], [73.8, 29788.0], [73.9, 29823.0], [74.0, 29826.0], [74.1, 29827.0], [74.2, 29854.0], [74.3, 29887.0], [74.4, 29901.0], [74.5, 29918.0], [74.6, 29933.0], [74.7, 29955.0], [74.8, 29994.0], [74.9, 30012.0], [75.0, 30013.0], [75.1, 30013.0], [75.2, 30026.0], [75.3, 30040.0], [75.4, 30042.0], [75.5, 30072.0], [75.6, 30097.0], [75.7, 30103.0], [75.8, 30131.0], [75.9, 30181.0], [76.0, 30195.0], [76.1, 30242.0], [76.2, 30289.0], [76.3, 30292.0], [76.4, 30310.0], [76.5, 30357.0], [76.6, 30371.0], [76.7, 30380.0], [76.8, 30389.0], [76.9, 30456.0], [77.0, 30461.0], [77.1, 30493.0], [77.2, 30493.0], [77.3, 30504.0], [77.4, 30525.0], [77.5, 30532.0], [77.6, 30549.0], [77.7, 30570.0], [77.8, 30586.0], [77.9, 30597.0], [78.0, 30612.0], [78.1, 30670.0], [78.2, 30674.0], [78.3, 30676.0], [78.4, 30696.0], [78.5, 30698.0], [78.6, 30761.0], [78.7, 30818.0], [78.8, 30829.0], [78.9, 30859.0], [79.0, 30884.0], [79.1, 30925.0], [79.2, 30986.0], [79.3, 31001.0], [79.4, 31021.0], [79.5, 31043.0], [79.6, 31097.0], [79.7, 31140.0], [79.8, 31206.0], [79.9, 31209.0], [80.0, 31247.0], [80.1, 31305.0], [80.2, 31332.0], [80.3, 31340.0], [80.4, 31346.0], [80.5, 31367.0], [80.6, 31385.0], [80.7, 31396.0], [80.8, 31400.0], [80.9, 31456.0], [81.0, 31476.0], [81.1, 31483.0], [81.2, 31628.0], [81.3, 31630.0], [81.4, 31642.0], [81.5, 31651.0], [81.6, 31660.0], [81.7, 31696.0], [81.8, 31782.0], [81.9, 31800.0], [82.0, 31823.0], [82.1, 31829.0], [82.2, 31846.0], [82.3, 31851.0], [82.4, 31886.0], [82.5, 31891.0], [82.6, 31920.0], [82.7, 31938.0], [82.8, 31948.0], [82.9, 31975.0], [83.0, 31979.0], [83.1, 31983.0], [83.2, 32016.0], [83.3, 32027.0], [83.4, 32040.0], [83.5, 32049.0], [83.6, 32054.0], [83.7, 32072.0], [83.8, 32128.0], [83.9, 32142.0], [84.0, 32164.0], [84.1, 32164.0], [84.2, 32172.0], [84.3, 32176.0], [84.4, 32213.0], [84.5, 32222.0], [84.6, 32225.0], [84.7, 32304.0], [84.8, 32409.0], [84.9, 32482.0], [85.0, 32496.0], [85.1, 32518.0], [85.2, 32537.0], [85.3, 32594.0], [85.4, 32629.0], [85.5, 32652.0], [85.6, 32663.0], [85.7, 32684.0], [85.8, 32722.0], [85.9, 32772.0], [86.0, 32817.0], [86.1, 32895.0], [86.2, 32949.0], [86.3, 33041.0], [86.4, 33068.0], [86.5, 33092.0], [86.6, 33125.0], [86.7, 33150.0], [86.8, 33213.0], [86.9, 33215.0], [87.0, 33254.0], [87.1, 33292.0], [87.2, 33331.0], [87.3, 33336.0], [87.4, 33360.0], [87.5, 33387.0], [87.6, 33390.0], [87.7, 33428.0], [87.8, 33532.0], [87.9, 33565.0], [88.0, 33661.0], [88.1, 33673.0], [88.2, 33737.0], [88.3, 33738.0], [88.4, 33767.0], [88.5, 33774.0], [88.6, 33800.0], [88.7, 33865.0], [88.8, 33892.0], [88.9, 33928.0], [89.0, 33954.0], [89.1, 34009.0], [89.2, 34030.0], [89.3, 34040.0], [89.4, 34041.0], [89.5, 34042.0], [89.6, 34108.0], [89.7, 34143.0], [89.8, 34193.0], [89.9, 34219.0], [90.0, 34228.0], [90.1, 34237.0], [90.2, 34284.0], [90.3, 34303.0], [90.4, 34449.0], [90.5, 34596.0], [90.6, 34682.0], [90.7, 34686.0], [90.8, 34717.0], [90.9, 34735.0], [91.0, 34741.0], [91.1, 34776.0], [91.2, 34781.0], [91.3, 34785.0], [91.4, 34894.0], [91.5, 35002.0], [91.6, 35007.0], [91.7, 35023.0], [91.8, 35107.0], [91.9, 35157.0], [92.0, 35199.0], [92.1, 35223.0], [92.2, 35234.0], [92.3, 35338.0], [92.4, 35339.0], [92.5, 35366.0], [92.6, 35394.0], [92.7, 35488.0], [92.8, 35633.0], [92.9, 35707.0], [93.0, 35719.0], [93.1, 35757.0], [93.2, 35812.0], [93.3, 35855.0], [93.4, 36025.0], [93.5, 36115.0], [93.6, 36290.0], [93.7, 36308.0], [93.8, 36364.0], [93.9, 36537.0], [94.0, 36577.0], [94.1, 36732.0], [94.2, 36755.0], [94.3, 36766.0], [94.4, 36798.0], [94.5, 36802.0], [94.6, 36826.0], [94.7, 36922.0], [94.8, 37042.0], [94.9, 37145.0], [95.0, 37213.0], [95.1, 37316.0], [95.2, 37376.0], [95.3, 37514.0], [95.4, 37717.0], [95.5, 37854.0], [95.6, 38034.0], [95.7, 38112.0], [95.8, 38261.0], [95.9, 38606.0], [96.0, 38638.0], [96.1, 38641.0], [96.2, 38844.0], [96.3, 39065.0], [96.4, 39114.0], [96.5, 39114.0], [96.6, 39130.0], [96.7, 39135.0], [96.8, 39214.0], [96.9, 39279.0], [97.0, 39429.0], [97.1, 39528.0], [97.2, 39712.0], [97.3, 39750.0], [97.4, 40069.0], [97.5, 40124.0], [97.6, 40150.0], [97.7, 40366.0], [97.8, 40581.0], [97.9, 40674.0], [98.0, 40692.0], [98.1, 40711.0], [98.2, 40733.0], [98.3, 41295.0], [98.4, 41334.0], [98.5, 41343.0], [98.6, 41975.0], [98.7, 42377.0], [98.8, 42404.0], [98.9, 42492.0], [99.0, 42796.0], [99.1, 42911.0], [99.2, 43369.0], [99.3, 43470.0], [99.4, 44690.0], [99.5, 46295.0], [99.6, 46522.0], [99.7, 47382.0], [99.8, 49209.0], [99.9, 49479.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6500.0, "maxY": 13.0, "series": [{"data": [[33300.0, 5.0], [32900.0, 1.0], [33700.0, 4.0], [34100.0, 3.0], [34500.0, 1.0], [35700.0, 3.0], [35300.0, 4.0], [36500.0, 2.0], [36100.0, 1.0], [36900.0, 1.0], [37700.0, 1.0], [38100.0, 1.0], [37300.0, 2.0], [40500.0, 1.0], [39700.0, 2.0], [40100.0, 2.0], [41300.0, 2.0], [42900.0, 1.0], [43300.0, 1.0], [46500.0, 1.0], [47300.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [7400.0, 1.0], [8200.0, 1.0], [8400.0, 1.0], [9100.0, 1.0], [9600.0, 1.0], [10200.0, 1.0], [10100.0, 1.0], [10400.0, 1.0], [10800.0, 2.0], [11000.0, 2.0], [10900.0, 1.0], [11500.0, 1.0], [12200.0, 2.0], [12100.0, 3.0], [11900.0, 1.0], [12600.0, 2.0], [12700.0, 1.0], [12900.0, 2.0], [13200.0, 2.0], [13000.0, 1.0], [13600.0, 1.0], [13700.0, 2.0], [13400.0, 2.0], [13500.0, 1.0], [13900.0, 3.0], [14300.0, 2.0], [14800.0, 1.0], [14700.0, 1.0], [14500.0, 2.0], [14400.0, 1.0], [15200.0, 3.0], [15100.0, 1.0], [15300.0, 2.0], [14900.0, 1.0], [15400.0, 1.0], [15600.0, 2.0], [15500.0, 1.0], [15700.0, 1.0], [15900.0, 2.0], [16000.0, 2.0], [16100.0, 1.0], [16300.0, 1.0], [17400.0, 2.0], [16400.0, 3.0], [16600.0, 2.0], [17000.0, 2.0], [16800.0, 3.0], [17200.0, 4.0], [17800.0, 4.0], [18000.0, 3.0], [18200.0, 4.0], [18400.0, 2.0], [17600.0, 2.0], [18600.0, 4.0], [19000.0, 8.0], [18800.0, 4.0], [19400.0, 5.0], [19200.0, 6.0], [20200.0, 6.0], [19600.0, 2.0], [20400.0, 4.0], [19800.0, 1.0], [20000.0, 2.0], [21400.0, 8.0], [21000.0, 2.0], [21200.0, 2.0], [20600.0, 3.0], [20800.0, 7.0], [22000.0, 5.0], [21600.0, 6.0], [22200.0, 3.0], [22400.0, 10.0], [21800.0, 4.0], [22800.0, 6.0], [22600.0, 5.0], [23400.0, 4.0], [23200.0, 4.0], [23000.0, 6.0], [23800.0, 4.0], [23600.0, 7.0], [24000.0, 7.0], [24200.0, 5.0], [24400.0, 5.0], [24800.0, 6.0], [25000.0, 7.0], [25400.0, 6.0], [25200.0, 4.0], [24600.0, 5.0], [25600.0, 3.0], [26400.0, 7.0], [26600.0, 9.0], [25800.0, 4.0], [26000.0, 5.0], [26200.0, 8.0], [27400.0, 13.0], [26800.0, 9.0], [27000.0, 6.0], [27200.0, 13.0], [27600.0, 8.0], [27800.0, 3.0], [28600.0, 12.0], [28000.0, 9.0], [28200.0, 8.0], [28400.0, 2.0], [29000.0, 6.0], [29400.0, 7.0], [29200.0, 6.0], [28800.0, 6.0], [29600.0, 4.0], [30000.0, 9.0], [29800.0, 5.0], [30400.0, 4.0], [30600.0, 6.0], [30200.0, 3.0], [31000.0, 4.0], [30800.0, 4.0], [31600.0, 6.0], [31400.0, 4.0], [31200.0, 3.0], [32000.0, 6.0], [32600.0, 4.0], [32400.0, 3.0], [31800.0, 7.0], [32200.0, 3.0], [32800.0, 2.0], [34000.0, 5.0], [33200.0, 4.0], [33600.0, 2.0], [34800.0, 1.0], [34400.0, 1.0], [35200.0, 2.0], [36800.0, 2.0], [36000.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [38000.0, 1.0], [38800.0, 1.0], [39200.0, 2.0], [40000.0, 1.0], [42400.0, 2.0], [41200.0, 1.0], [49200.0, 1.0], [33500.0, 2.0], [34700.0, 6.0], [33100.0, 2.0], [34300.0, 1.0], [33900.0, 2.0], [36700.0, 4.0], [35100.0, 3.0], [36300.0, 2.0], [37500.0, 1.0], [37100.0, 1.0], [39100.0, 4.0], [39500.0, 1.0], [40300.0, 1.0], [40700.0, 2.0], [42300.0, 1.0], [41900.0, 1.0], [42700.0, 1.0], [17100.0, 2.0], [16700.0, 5.0], [16900.0, 1.0], [17500.0, 6.0], [18100.0, 2.0], [18300.0, 4.0], [17700.0, 3.0], [17900.0, 1.0], [19100.0, 2.0], [19300.0, 5.0], [18700.0, 4.0], [18900.0, 2.0], [18500.0, 2.0], [19700.0, 6.0], [19500.0, 4.0], [20300.0, 5.0], [20100.0, 6.0], [19900.0, 5.0], [20700.0, 2.0], [21500.0, 4.0], [21300.0, 5.0], [20900.0, 8.0], [20500.0, 4.0], [21100.0, 3.0], [21700.0, 6.0], [22300.0, 5.0], [22100.0, 6.0], [21900.0, 4.0], [22500.0, 10.0], [22700.0, 5.0], [23500.0, 6.0], [22900.0, 5.0], [23300.0, 7.0], [23100.0, 3.0], [23700.0, 5.0], [24100.0, 7.0], [24500.0, 3.0], [24300.0, 2.0], [23900.0, 7.0], [24900.0, 3.0], [24700.0, 4.0], [25500.0, 7.0], [25100.0, 6.0], [25300.0, 7.0], [25700.0, 3.0], [25900.0, 4.0], [26300.0, 4.0], [26100.0, 7.0], [26500.0, 6.0], [26700.0, 7.0], [27500.0, 9.0], [26900.0, 9.0], [27300.0, 12.0], [27100.0, 5.0], [28100.0, 8.0], [28500.0, 7.0], [27700.0, 5.0], [27900.0, 7.0], [28300.0, 3.0], [28700.0, 6.0], [29300.0, 3.0], [29100.0, 3.0], [28900.0, 6.0], [29500.0, 6.0], [30700.0, 1.0], [30300.0, 5.0], [30500.0, 7.0], [29900.0, 5.0], [30100.0, 4.0], [29700.0, 3.0], [31300.0, 7.0], [31700.0, 1.0], [30900.0, 2.0], [31100.0, 1.0], [32100.0, 6.0], [32300.0, 1.0], [32700.0, 2.0], [31900.0, 6.0], [32500.0, 3.0], [33000.0, 3.0], [34200.0, 4.0], [34600.0, 2.0], [33400.0, 1.0], [33800.0, 3.0], [35000.0, 3.0], [35800.0, 2.0], [36200.0, 1.0], [35400.0, 1.0], [37000.0, 1.0], [37800.0, 1.0], [38600.0, 3.0], [38200.0, 1.0], [39400.0, 1.0], [39000.0, 1.0], [40600.0, 2.0], [43400.0, 1.0], [44600.0, 1.0], [46200.0, 1.0], [49400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.70298774E12, "maxY": 514.5262615859922, "series": [{"data": [[1.70298774E12, 514.5262615859922], [1.7029878E12, 15.0]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7029878E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6511.0, "minX": 1.0, "maxY": 49479.0, "series": [{"data": [[2.0, 49209.0], [3.0, 42796.0], [4.0, 47382.0], [5.0, 43369.0], [6.0, 42404.0], [7.0, 40733.0], [8.0, 40674.0], [9.0, 46522.0], [10.0, 38844.0], [11.0, 41975.0], [12.0, 42377.0], [13.0, 40124.0], [14.0, 39712.0], [15.0, 39114.0], [16.0, 40692.0], [17.0, 44690.0], [18.0, 41295.0], [19.0, 39130.0], [20.0, 38034.0], [21.0, 42911.0], [22.0, 46295.0], [23.0, 40069.0], [24.0, 37316.0], [25.0, 42492.0], [26.0, 43470.0], [27.0, 39279.0], [28.0, 40150.0], [29.0, 40711.0], [30.0, 33292.0], [31.0, 35199.0], [33.0, 39214.0], [32.0, 33092.0], [35.0, 39065.0], [34.0, 39750.0], [37.0, 41343.0], [36.0, 37145.0], [39.0, 39429.0], [38.0, 41334.0], [41.0, 40581.0], [40.0, 36308.0], [43.0, 38606.0], [42.0, 38638.0], [45.0, 40366.0], [44.0, 36826.0], [47.0, 31001.0], [46.0, 33150.0], [49.0, 39135.0], [48.0, 34781.0], [51.0, 34237.0], [50.0, 38261.0], [53.0, 39528.0], [52.0, 35757.0], [55.0, 39114.0], [54.0, 35394.0], [57.0, 35633.0], [56.0, 35002.0], [59.0, 37376.0], [58.0, 38641.0], [61.0, 35812.0], [60.0, 35339.0], [63.0, 32409.0], [62.0, 33892.0], [67.0, 38112.0], [66.0, 33800.0], [65.0, 36755.0], [64.0, 34193.0], [71.0, 28502.0], [70.0, 37717.0], [69.0, 34143.0], [68.0, 35107.0], [75.0, 32164.0], [74.0, 37854.0], [73.0, 35023.0], [72.0, 32895.0], [79.0, 28551.0], [78.0, 36537.0], [77.0, 37514.0], [76.0, 33928.0], [83.0, 29854.0], [82.0, 29583.0], [81.0, 36115.0], [80.0, 35488.0], [87.0, 34041.0], [86.0, 36364.0], [85.0, 35223.0], [84.0, 31920.0], [91.0, 34776.0], [90.0, 36766.0], [89.0, 33254.0], [88.0, 28018.0], [95.0, 32016.0], [94.0, 31476.5], [92.0, 33041.0], [98.0, 33346.0], [96.0, 36577.0], [102.0, 34758.0], [100.0, 30505.0], [107.0, 28541.0], [106.0, 33954.0], [105.0, 32172.0], [104.0, 33191.5], [111.0, 30515.0], [109.0, 28110.0], [108.0, 34596.0], [115.0, 36290.0], [114.0, 35366.0], [113.0, 28748.0], [112.0, 28141.0], [119.0, 29918.0], [118.0, 37042.0], [117.0, 30586.0], [116.0, 28693.0], [123.0, 31866.5], [121.0, 37213.0], [120.0, 28403.0], [126.0, 32722.0], [125.0, 30728.0], [135.0, 31696.0], [134.0, 31140.0], [133.0, 31643.5], [131.0, 28882.0], [130.0, 32652.0], [129.0, 36732.0], [128.0, 30306.5], [143.0, 33589.0], [141.0, 34219.0], [140.0, 35338.0], [138.0, 34042.0], [137.0, 36025.0], [136.0, 29673.0], [150.0, 34741.0], [149.0, 34030.0], [148.0, 35855.0], [147.0, 29826.0], [146.0, 28001.0], [145.0, 28625.0], [144.0, 31018.5], [158.0, 27375.0], [157.0, 28155.0], [156.0, 28515.0], [155.0, 28141.0], [153.0, 31979.0], [152.0, 29622.0], [167.0, 27999.0], [166.0, 31346.0], [165.0, 27601.0], [164.0, 33673.0], [163.0, 30597.0], [162.0, 32213.0], [161.0, 33195.5], [160.0, 27261.0], [175.0, 31823.0], [174.0, 34303.0], [173.0, 28081.0], [172.0, 28237.0], [171.0, 34573.5], [169.0, 27117.0], [168.0, 32054.0], [183.0, 27364.5], [181.0, 31043.0], [180.0, 30292.0], [179.0, 33390.0], [178.0, 30289.0], [177.0, 29371.0], [191.0, 31606.5], [189.0, 29346.0], [188.0, 28650.0], [187.0, 29258.0], [186.0, 28780.0], [185.0, 27644.0], [184.0, 34449.0], [199.0, 30350.5], [197.0, 32496.0], [196.0, 30669.0], [195.0, 26842.0], [193.0, 28039.0], [192.0, 34009.0], [207.0, 32320.5], [205.0, 27270.0], [204.0, 29539.0], [203.0, 30005.0], [202.0, 31217.0], [200.0, 34682.0], [215.0, 28058.0], [214.0, 26777.0], [213.0, 26641.0], [212.0, 34894.0], [211.0, 32222.0], [210.0, 30461.0], [209.0, 33125.0], [208.0, 29955.0], [223.0, 29239.0], [222.0, 33213.0], [221.0, 32027.0], [220.0, 35234.0], [219.0, 27958.0], [218.0, 33661.0], [217.0, 28344.0], [231.0, 28644.0], [230.0, 28937.0], [229.0, 30195.0], [228.0, 27001.0], [227.0, 28024.0], [226.0, 34108.0], [225.0, 33565.0], [224.0, 28266.0], [239.0, 26132.0], [238.0, 28643.0], [237.0, 35007.0], [236.0, 26416.0], [235.0, 29641.0], [234.0, 29089.0], [233.0, 29445.0], [232.0, 31983.0], [247.0, 31476.0], [246.0, 29208.5], [244.0, 28167.0], [243.0, 27465.0], [242.0, 32118.0], [240.0, 34228.0], [255.0, 27224.0], [254.0, 27440.0], [253.0, 29611.0], [252.0, 30493.0], [251.0, 31305.0], [250.0, 28620.5], [248.0, 33068.0], [269.0, 26303.0], [270.0, 28694.0], [268.0, 27042.0], [259.0, 34035.5], [257.0, 28362.5], [267.0, 26990.0], [266.0, 26971.0], [265.0, 27764.0], [264.0, 27344.0], [263.0, 27266.0], [262.0, 27347.0], [261.0, 28385.0], [260.0, 26329.0], [286.0, 28751.0], [287.0, 25446.0], [285.0, 29431.0], [284.0, 29747.0], [283.0, 26278.5], [281.0, 34785.0], [280.0, 25762.0], [279.0, 30925.0], [273.0, 28053.0], [272.0, 30404.5], [275.0, 25479.0], [274.0, 30859.0], [278.0, 27735.0], [277.0, 27482.0], [276.0, 27264.0], [302.0, 29400.0], [303.0, 25226.0], [301.0, 30674.0], [300.0, 25931.0], [299.0, 30986.0], [298.0, 26519.0], [297.0, 27520.0], [296.0, 28668.0], [295.0, 25090.0], [289.0, 31891.0], [288.0, 32225.0], [291.0, 33767.0], [290.0, 25822.0], [294.0, 30601.0], [292.0, 31400.0], [318.0, 27424.0], [319.0, 32684.0], [317.0, 25048.0], [316.0, 27215.0], [315.0, 27961.0], [314.0, 32709.0], [312.0, 34040.0], [311.0, 26766.0], [305.0, 31628.0], [304.0, 25171.0], [307.0, 28047.0], [306.0, 31642.0], [310.0, 29051.0], [309.0, 30612.0], [308.0, 29241.0], [333.0, 32663.0], [335.0, 29003.0], [332.0, 27448.0], [322.0, 26163.0], [321.0, 28227.0], [320.0, 26562.0], [331.0, 29994.0], [330.0, 30456.0], [329.0, 30310.0], [328.0, 31385.0], [327.0, 28243.5], [325.0, 31800.0], [324.0, 26485.5], [349.0, 26867.0], [350.0, 30698.0], [348.0, 32817.0], [339.0, 28842.0], [338.0, 31829.0], [337.0, 24650.0], [336.0, 30012.0], [347.0, 25827.0], [346.0, 31782.0], [345.0, 30013.0], [344.0, 32949.0], [343.0, 30570.0], [342.0, 25061.0], [341.0, 26752.0], [366.0, 30005.0], [364.0, 24194.0], [355.0, 26960.0], [354.0, 29440.0], [353.0, 31938.0], [352.0, 31061.5], [363.0, 29170.0], [362.0, 27412.0], [361.0, 31247.0], [360.0, 33360.0], [359.0, 32176.0], [358.0, 28951.0], [357.0, 30696.0], [356.0, 25536.0], [382.0, 29659.0], [383.0, 26406.0], [381.0, 31396.0], [380.0, 29783.0], [379.0, 26049.0], [378.0, 26970.0], [377.0, 26686.0], [376.0, 30131.0], [375.0, 26893.0], [371.0, 28957.5], [369.0, 26558.0], [368.0, 26514.0], [373.0, 28840.5], [398.0, 32772.0], [399.0, 26858.0], [397.0, 26297.0], [396.0, 31948.0], [395.0, 26284.0], [394.0, 27786.0], [393.0, 27563.0], [392.0, 31340.0], [391.0, 27033.0], [387.0, 28250.5], [385.0, 28033.5], [389.0, 29218.0], [388.0, 33387.0], [414.0, 28256.0], [415.0, 32304.0], [413.0, 30341.5], [402.0, 26992.666666666668], [411.0, 24378.0], [410.0, 26914.0], [409.0, 26952.0], [408.0, 26897.0], [407.0, 32482.0], [406.0, 29788.0], [405.0, 27445.0], [404.0, 26319.5], [429.0, 24672.0], [430.0, 30103.0], [428.0, 23434.0], [419.0, 24131.0], [418.0, 23397.0], [417.0, 24020.0], [416.0, 30493.0], [427.0, 32629.0], [426.0, 23473.5], [425.0, 26296.0], [423.0, 27459.0], [422.0, 27369.0], [421.0, 27679.0], [420.0, 28328.0], [435.0, 23620.0], [446.0, 27398.5], [444.0, 29823.0], [434.0, 26238.0], [433.0, 24005.0], [432.0, 23197.5], [443.0, 27650.5], [441.0, 27639.0], [440.0, 27621.0], [439.0, 28684.0], [438.0, 27827.0], [437.0, 26187.0], [436.0, 26121.0], [462.0, 26286.0], [463.0, 25331.0], [461.0, 27109.0], [460.0, 28416.0], [459.0, 29175.0], [458.0, 30884.0], [457.0, 24305.0], [455.0, 24405.0], [449.0, 28924.0], [448.0, 27953.0], [451.0, 28973.0], [450.0, 28910.0], [454.0, 32049.0], [453.0, 32128.0], [452.0, 29827.0], [478.0, 23249.0], [479.0, 26665.0], [477.0, 24476.0], [476.0, 31483.0], [475.0, 28800.0], [474.0, 24340.0], [473.0, 22615.0], [472.0, 23791.5], [470.0, 29494.0], [465.0, 27981.0], [464.0, 29901.0], [467.0, 29887.0], [466.0, 30072.0], [469.0, 25035.0], [468.0, 26726.0], [493.0, 27760.0], [494.0, 22396.0], [492.0, 24126.0], [483.0, 27412.5], [481.0, 25742.0], [480.0, 31660.0], [491.0, 22422.0], [490.0, 25024.0], [489.0, 30818.0], [488.0, 25428.0], [487.0, 22811.0], [486.0, 22450.0], [485.0, 31651.0], [484.0, 30504.0], [510.0, 31097.0], [511.0, 24135.0], [509.0, 21768.0], [508.0, 27157.0], [507.0, 27003.0], [506.0, 29076.0], [505.0, 27170.0], [504.0, 24643.0], [503.0, 27829.0], [496.0, 27365.5], [499.0, 29383.0], [498.0, 23128.0], [502.0, 28529.0], [501.0, 27095.5], [540.0, 27041.0], [543.0, 24750.0], [529.0, 23001.0], [528.0, 25944.0], [531.0, 28831.0], [530.0, 25525.0], [533.0, 23793.0], [532.0, 23891.0], [542.0, 30389.0], [541.0, 28577.0], [539.0, 27054.0], [538.0, 21672.0], [537.0, 30040.0], [536.0, 23957.0], [527.0, 23074.5], [515.0, 26286.5], [513.0, 26706.0], [517.0, 30761.0], [516.0, 21426.0], [519.0, 24104.0], [518.0, 28244.0], [525.0, 25017.0], [524.0, 24125.0], [523.0, 27145.0], [521.0, 22942.0], [520.0, 26386.0], [535.0, 27399.0], [534.0, 25325.0], [568.0, 20884.0], [572.0, 21976.0], [575.0, 26487.0], [562.0, 30097.0], [560.0, 26373.0], [564.0, 27256.0], [563.0, 24633.0], [574.0, 20992.0], [573.0, 23954.0], [571.0, 23674.0], [570.0, 27394.0], [569.0, 23290.0], [559.0, 29074.0], [545.0, 28687.0], [544.0, 22978.0], [547.0, 23918.0], [546.0, 26547.0], [549.0, 29295.0], [548.0, 22135.0], [551.0, 20500.0], [550.0, 26146.0], [558.0, 23945.0], [557.0, 21887.0], [556.0, 26452.0], [554.0, 26650.0], [553.0, 24828.0], [567.0, 25744.0], [565.0, 25293.0], [600.0, 23526.0], [605.0, 24403.0], [606.0, 20195.0], [592.0, 26570.0], [594.0, 21671.0], [593.0, 21038.0], [604.0, 21944.5], [602.0, 27339.0], [601.0, 26037.0], [591.0, 27319.0], [576.0, 24257.0], [578.0, 22908.0], [577.0, 24205.0], [580.0, 27204.0], [579.0, 23636.0], [583.0, 20257.0], [581.0, 20340.0], [590.0, 20983.0], [589.0, 25956.0], [588.0, 20650.0], [587.0, 22580.0], [586.0, 28205.0], [585.0, 27470.0], [584.0, 25333.5], [599.0, 22144.0], [598.0, 26710.0], [597.0, 24533.0], [596.0, 23850.0], [633.0, 25351.0], [637.0, 23358.0], [639.0, 27565.0], [625.0, 29066.0], [624.0, 19378.0], [627.0, 22375.0], [626.0, 26243.0], [629.0, 23556.0], [628.0, 22048.0], [636.0, 20975.0], [635.0, 20456.0], [634.0, 26978.0], [632.0, 21997.0], [615.0, 26725.5], [613.0, 26452.0], [612.0, 20972.0], [611.0, 20245.0], [610.0, 25288.0], [608.0, 22650.0], [623.0, 23323.0], [622.0, 21557.0], [621.0, 20487.0], [620.0, 22243.0], [619.0, 24732.0], [618.0, 25184.0], [617.0, 23871.0], [616.0, 22563.0], [631.0, 28005.0], [630.0, 22625.0], [665.0, 22412.0], [670.0, 21049.5], [671.0, 25588.0], [657.0, 26607.0], [656.0, 22602.0], [659.0, 20811.0], [658.0, 23013.0], [661.0, 22587.0], [660.0, 28171.0], [668.0, 24298.0], [667.0, 27266.0], [666.0, 20318.0], [664.0, 25212.0], [647.0, 23715.0], [646.0, 26942.0], [645.0, 25314.5], [643.0, 24931.0], [642.0, 25628.0], [640.0, 25335.5], [655.0, 24966.0], [654.0, 24440.0], [653.0, 19987.0], [652.0, 24641.0], [651.0, 28680.0], [650.0, 20067.0], [649.0, 28716.0], [648.0, 23652.0], [663.0, 21124.0], [662.0, 27531.0], [700.0, 26430.0], [703.0, 25401.0], [689.0, 19720.0], [688.0, 27087.0], [691.0, 18785.0], [690.0, 26068.0], [693.0, 19984.0], [692.0, 19163.0], [702.0, 22085.0], [701.0, 26871.0], [699.0, 25101.0], [698.0, 25866.0], [697.0, 22785.0], [696.0, 21771.0], [687.0, 22541.0], [672.0, 23187.0], [674.0, 18396.0], [673.0, 24843.0], [676.0, 20636.0], [675.0, 23472.0], [678.0, 20932.0], [677.0, 25396.0], [686.0, 24450.0], [685.0, 26206.0], [684.0, 27119.5], [682.0, 19083.0], [681.0, 21148.0], [680.0, 25475.0], [695.0, 22838.0], [694.0, 26842.0], [732.0, 21483.0], [735.0, 22489.0], [720.0, 21520.0], [723.0, 22235.0], [721.0, 26706.0], [725.0, 21758.0], [724.0, 23395.0], [734.0, 21607.0], [733.0, 18678.0], [731.0, 17526.0], [730.0, 26473.0], [729.0, 20889.0], [728.0, 18323.0], [719.0, 20327.0], [705.0, 19067.0], [704.0, 21524.0], [707.0, 19584.0], [706.0, 19501.0], [711.0, 23280.0], [709.0, 23007.0], [718.0, 20811.0], [717.0, 21379.0], [716.0, 19818.0], [715.0, 19600.0], [714.0, 19090.0], [713.0, 19944.0], [712.0, 25587.0], [727.0, 20408.0], [726.0, 24579.0], [761.0, 23441.5], [766.0, 12107.0], [767.0, 24033.0], [753.0, 25454.0], [752.0, 17874.0], [755.0, 20663.0], [754.0, 24205.0], [765.0, 23647.0], [764.0, 18021.0], [762.0, 25599.0], [751.0, 18510.0], [737.0, 22908.0], [739.0, 22780.0], [738.0, 25524.0], [741.0, 16910.0], [740.0, 22460.0], [743.0, 18621.0], [742.0, 23947.0], [750.0, 20050.5], [749.0, 16354.0], [747.0, 17562.0], [746.0, 23187.0], [745.0, 21724.0], [744.0, 17219.0], [759.0, 21344.0], [758.0, 24507.0], [757.0, 22110.0], [756.0, 25603.0], [796.0, 17153.0], [792.0, 6956.0], [783.0, 21609.0], [770.0, 22798.0], [768.0, 17583.0], [773.0, 18895.0], [771.0, 25262.0], [775.0, 19417.0], [774.0, 24776.0], [782.0, 18805.0], [781.0, 22162.0], [780.0, 25451.0], [779.0, 20234.0], [778.0, 19010.0], [777.0, 23732.0], [776.0, 18419.0], [799.0, 17857.0], [785.0, 19365.0], [784.0, 23247.0], [787.0, 18115.0], [786.0, 16718.0], [789.0, 24994.0], [788.0, 23593.0], [798.0, 21885.0], [797.0, 22511.0], [795.0, 20528.0], [794.0, 23831.0], [793.0, 21646.5], [791.0, 18963.0], [790.0, 22489.0], [828.0, 22882.0], [831.0, 22896.0], [817.0, 23341.0], [816.0, 23292.0], [819.0, 22684.0], [818.0, 19799.0], [821.0, 16794.0], [820.0, 20901.0], [830.0, 16656.0], [829.0, 22544.0], [827.0, 22488.0], [826.0, 22282.0], [825.0, 17545.0], [824.0, 17409.0], [815.0, 23736.0], [800.0, 24829.0], [802.0, 16413.0], [801.0, 20249.0], [804.0, 24007.0], [803.0, 17648.0], [807.0, 20925.5], [805.0, 22640.0], [814.0, 23087.0], [813.0, 22565.0], [812.0, 22040.0], [811.0, 17260.0], [810.0, 21886.0], [809.0, 21262.0], [808.0, 22450.0], [823.0, 19490.0], [822.0, 22906.0], [860.0, 18084.0], [859.0, 12193.5], [863.0, 13446.0], [848.0, 23510.0], [851.0, 22814.0], [849.0, 21337.0], [853.0, 19493.0], [852.0, 20821.0], [862.0, 21428.0], [861.0, 20121.0], [858.0, 21426.0], [857.0, 18899.0], [856.0, 18580.0], [847.0, 20077.0], [833.0, 18032.0], [832.0, 18277.0], [835.0, 18846.0], [834.0, 19263.0], [837.0, 15399.0], [836.0, 23644.0], [839.0, 18196.0], [838.0, 19165.0], [846.0, 18905.0], [844.0, 17940.0], [843.0, 20339.0], [842.0, 19218.0], [841.0, 23611.0], [840.0, 23737.0], [855.0, 16876.0], [854.0, 21960.0], [892.0, 20765.0], [895.0, 15383.0], [880.0, 16095.0], [882.0, 18938.0], [881.0, 21988.0], [884.0, 22192.0], [883.0, 22090.0], [894.0, 21226.0], [893.0, 19796.0], [891.0, 20772.0], [890.0, 20569.0], [889.0, 21411.0], [888.0, 19657.0], [879.0, 13728.0], [864.0, 22720.0], [866.0, 21886.0], [865.0, 22178.0], [868.0, 22422.0], [867.0, 14461.0], [870.0, 14902.0], [869.0, 17789.0], [878.0, 17733.0], [877.0, 18614.5], [875.0, 21122.0], [874.0, 19903.0], [873.0, 17084.0], [872.0, 17143.0], [886.0, 21620.0], [885.0, 18233.0], [921.0, 21359.0], [926.0, 14419.0], [927.0, 19040.0], [913.0, 14509.0], [912.0, 22025.0], [915.0, 20465.0], [914.0, 14372.0], [917.0, 21339.0], [916.0, 12108.0], [924.0, 19247.0], [923.0, 13504.0], [922.0, 17224.0], [920.0, 17512.0], [903.0, 12745.0], [902.0, 15748.0], [901.0, 21718.0], [900.0, 17995.5], [898.0, 18310.0], [897.0, 18449.5], [911.0, 17814.0], [910.0, 18254.5], [908.0, 15195.0], [907.0, 13928.0], [906.0, 17036.5], [904.0, 12689.0], [919.0, 19646.0], [918.0, 21417.0], [954.0, 19277.5], [958.0, 19795.0], [959.0, 10461.0], [945.0, 18776.0], [944.0, 14811.0], [947.0, 19728.0], [946.0, 19320.0], [949.0, 12632.0], [948.0, 15213.0], [957.0, 15903.0], [956.0, 19311.0], [955.0, 19216.0], [952.0, 10898.0], [935.0, 12195.0], [934.0, 12968.0], [933.0, 14770.0], [932.0, 20263.0], [931.0, 21044.0], [930.0, 16025.0], [929.0, 16668.0], [928.0, 17073.0], [943.0, 20246.0], [942.0, 20398.0], [941.0, 13244.0], [940.0, 18751.0], [939.0, 20186.0], [938.0, 19475.0], [937.0, 18654.0], [936.0, 12244.0], [951.0, 19509.0], [950.0, 13912.0], [988.0, 13910.0], [991.0, 13615.0], [977.0, 13279.0], [976.0, 16454.0], [979.0, 11040.0], [978.0, 17542.0], [981.0, 13434.0], [980.0, 10192.0], [990.0, 12202.0], [989.0, 12162.0], [987.0, 12997.0], [986.0, 13773.0], [985.0, 15438.0], [984.0, 15682.0], [975.0, 17181.0], [961.0, 19486.0], [960.0, 13050.0], [963.0, 15634.0], [962.0, 18865.0], [965.0, 19075.0], [964.0, 9684.0], [967.0, 14394.0], [966.0, 17474.0], [974.0, 17844.0], [973.0, 18640.0], [972.0, 18059.0], [971.0, 11054.0], [970.0, 10936.0], [969.0, 19067.0], [968.0, 18255.0], [983.0, 15295.0], [982.0, 16403.0], [997.0, 9132.0], [996.0, 6511.0], [995.0, 8440.0], [994.0, 10898.0], [993.0, 11539.0], [992.0, 10252.0], [1.0, 49479.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[500.03999999999843, 26011.63600000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56.06666666666667, "minX": 1.70298774E12, "maxY": 3342991.1666666665, "series": [{"data": [[1.70298774E12, 3342991.1666666665], [1.7029878E12, 99842.16666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70298774E12, 1877.2666666666667], [1.7029878E12, 56.06666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7029878E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25530.78063851701, "minX": 1.70298774E12, "maxY": 42112.0, "series": [{"data": [[1.70298774E12, 25530.78063851701], [1.7029878E12, 42112.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7029878E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4947.799176107105, "minX": 1.70298774E12, "maxY": 22691.137931034486, "series": [{"data": [[1.70298774E12, 4947.799176107105], [1.7029878E12, 22691.137931034486]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7029878E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1888.261585993821, "minX": 1.70298774E12, "maxY": 2989.4827586206898, "series": [{"data": [[1.70298774E12, 1888.261585993821], [1.7029878E12, 2989.4827586206898]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7029878E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6511.0, "minX": 1.70298774E12, "maxY": 49479.0, "series": [{"data": [[1.70298774E12, 41343.0], [1.7029878E12, 49479.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70298774E12, 33355.200000000004], [1.7029878E12, 47382.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70298774E12, 39119.88], [1.7029878E12, 49479.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70298774E12, 35275.6], [1.7029878E12, 49344.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70298774E12, 6511.0], [1.7029878E12, 37316.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70298774E12, 26092.0], [1.7029878E12, 41295.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7029878E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10895.5, "minX": 1.0, "maxY": 40430.5, "series": [{"data": [[2.0, 10895.5], [33.0, 20077.0], [32.0, 21665.5], [43.0, 22838.0], [45.0, 18363.0], [3.0, 40430.5], [49.0, 24059.0], [48.0, 25734.5], [51.0, 27445.0], [57.0, 20905.0], [58.0, 26938.5], [61.0, 28947.5], [63.0, 23954.0], [4.0, 15560.0], [67.0, 32652.0], [68.0, 28669.0], [77.0, 30380.0], [5.0, 16454.0], [6.0, 27687.5], [7.0, 36985.5], [9.0, 38073.0], [10.0, 36566.5], [1.0, 13910.0], [17.0, 18255.0], [20.0, 18702.5], [21.0, 17512.0], [29.0, 22282.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 962.0, "minX": 1.0, "maxY": 6184.5, "series": [{"data": [[2.0, 2140.0], [33.0, 2046.0], [32.0, 2431.5], [43.0, 3159.0], [45.0, 1612.0], [3.0, 6184.5], [49.0, 2612.0], [48.0, 2515.0], [51.0, 3653.0], [57.0, 2212.0], [58.0, 4492.0], [61.0, 4759.0], [63.0, 3085.0], [4.0, 1900.0], [67.0, 5030.0], [68.0, 5265.0], [77.0, 4960.0], [5.0, 962.0], [6.0, 1817.0], [7.0, 1723.5], [9.0, 3000.5], [10.0, 2722.5], [1.0, 1778.0], [17.0, 1531.0], [20.0, 1425.0], [21.0, 2302.0], [29.0, 1772.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 77.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.70298774E12, "maxY": 16.666666666666668, "series": [{"data": [[1.70298774E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70298774E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.70298774E12, "maxY": 16.183333333333334, "series": [{"data": [[1.70298774E12, 16.183333333333334], [1.7029878E12, 0.48333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7029878E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.70298774E12, "maxY": 16.183333333333334, "series": [{"data": [[1.70298774E12, 16.183333333333334], [1.7029878E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7029878E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.70298774E12, "maxY": 16.183333333333334, "series": [{"data": [[1.70298774E12, 16.183333333333334], [1.7029878E12, 0.48333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7029878E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

